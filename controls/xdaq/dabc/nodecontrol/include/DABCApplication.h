/* Generated by Together */

#ifndef DABC_XD_APPLICATION_H
#define DABC_XD_APPLICATION_H

#include "xdata/xdata.h"
#include "xdaq/WebApplication.h"
#include "toolbox/Chrono.h"
#include "toolbox/task/WorkLoopFactory.h"
#include "toolbox/exception/Handler.h"
#include "toolbox/net/URN.h"
#include "toolbox/fsm/AsynchronousFiniteStateMachine.h"
#include "toolbox/fsm/FailedEvent.h"



#include "xgi/WSM.h"
#include "xgi/Input.h"
#include "xgi/Output.h"


#include "DABCExceptions.h"
#include "nameParser.h"



#define __LIBVERSIONNAMESPACE__ "DABC_Control"
// <- this is the namespace as defined in the library version definition
#define __UPTIMEHEARTBEAT__ 5
// in seconds, period for dim heartbeat updating state and uptime variables



#define _DABC_COMMAND_SETPAR_ "SetParameter"
#define _DABC_COMMAND_LOADPARS_ "LoadParameters"
#define _DABC_COMMAND_SAVEPARS_ "SaveParameters"
#define _DABC_COMMAND_SHUTDOWN_ "Shutdown"
#define _DABC_COMMAND_GETINFOSPACE_ "GetInfospace"
#define _DABC_COMMAND_GETTABLE_ "GetTable"
#define _DABC_COMMAND_GETSTATUS_ "GetStatus"

#define _DABC_SERVICE_VERSION_ "DABCVersion"
#define _DABC_SERVICE_STATE_ "State"
#define _DABC_SERVICE_MESSAGE_ "statusMessage"
#define _DABC_SERVICE_STARTTIME_ "startTime"
#define _DABC_SERVICE_HEARTBEAT_ "heartbeatPeriod"
#define _DABC_SERVICE_NODELIST_ "Nodelist"


#define _DABC_SERVICE_DEBUG_ "debugLevel"
#define _DABC_SERVICE_FSMRECORD_ "RunStatus"
#define _DABC_SERVICE_INFORECORD_ "InfoMessage"



//class dabc::Command;

namespace dabc{
namespace xd{
    

class Registry;

    
/**
*  xdaq application with fsm and dabc registry object (dimserver).
*  @author J. Adamczewski, GSI
*/
class Application : public xdaq::WebApplication, public xdata::ActionListener
{ 


public:
    
    Application(xdaq::ApplicationStub* as) throw (xdaq::exception::Exception);

    virtual ~Application();


    dabc::xd::Registry* Registry(){return fxRegistry;}
 

 /**
	*  Callback for xdaq item change and retrieve events
	*/  
    virtual void actionPerformed (xdata::Event& e);
                                 

    
  
 

   /**
	*  Execute a command. This may run preferably in own thread that gets coms from queue.
	*/
    virtual void ExecuteLocalCommand(const std::string& com, const std::string& par);

    
     /** current state as string*/
    std::string GetState()
    {
        return currentState_;    
    }
   
   /**
	*  Change the state of the fsm according to the command of name com
	*/
    void ChangeState(const std::string& com);
    
    /** Test if the fsm command com is allowed from current state*/
    bool CheckTransitionPossible(const std::string& com);
 
      /** Put status message to logger (stdout) and infospace/dim variables */
    void StatusMessage(std::string message, dabc::xd::nameParser::recordstat priority=dabc::xd::nameParser::MESSAGE);
  
     

       
    protected:

  
    
	/** Default web page for application. Sets up simple state machine gui for browser*/
	virtual void Default(xgi::Input * in, xgi::Output * out ) throw (xgi::exception::Exception);
    
    /** This page will be displayed on web state machine failure*/
    virtual void failurePage(xgi::Output * out, xgi::exception::Exception & e)  throw (xgi::exception::Exception);

    /** Poll until finite state machine reaches destination state.
     * period for polling loop given in us. Throws xgi exception
     * for web state machine if fsm goes to failure 'F' state.*/
    void WaitFSM (char state, unsigned int period=500000)  throw (xgi::exception::Exception);

    /** Interface for implementation of state machine action in subclass*/    
    virtual void DoConfigure(toolbox::Event::Reference e)=0;

    /** Interface for implementation of state machine action in subclass*/    
    virtual void DoEnable(toolbox::Event::Reference e)=0 ;

    /** Interface for implementation of state machine action in subclass*/    
	virtual void DoHalt(toolbox::Event::Reference e)=0 ;

   /** Interface for implementation of state machine action in subclass*/    
    virtual void DoStop(toolbox::Event::Reference e)=0 ;

     /** Interface for implementation of state machine action in subclass*/    
    virtual void DoStart(toolbox::Event::Reference e)=0 ;

     /** Interface for implementation of state machine action in subclass*/    
	virtual void DoError(toolbox::Event::Reference e)=0 ;

     /** Interface for implementation of state machine action in subclass*/    
    virtual void DoHandleFailure(toolbox::Event::Reference e)=0;
  
     /** Interface for implementation of state machine action in subclass*/    
    virtual void DoResetFailure(toolbox::Event::Reference e)=0;
 

 


     /** Update state record */
    virtual void UpdateState();

     
    /** Shutdown (exit) this application. Will terminate process if there is no other app running.*/
    virtual void Shutdown();

    
   
  /** find out application descriptor of xdaq target id and instance number
    * the instance number represents nodeID of core framework */
    xdaq::ApplicationDescriptor * FindApplication(unsigned int xdaqid, unsigned int instance);

 
    /** find instance number for application of xdaqid in context of name*/
    int FindInstanceID(unsigned int xdaqid, const std::string& contextname);

  
    /** find context name from instance number (nodeid) and local app id*/
    std::string FindContextName(unsigned int xdaqid, unsigned int instance);

      /** create list of all contexts (nodes) from config registry*/
    std::string CreateContextList();

  /** find out number of nodes containing application of xdaq target id*/
    int FindNumberOfNodes(unsigned int xdaqid);
 
	
       /** infospace variable to contain the time in s since start*/
    xdata::UnsignedInteger runningTime_;
    
    /** infospace variable to contain the start epoch timestamp of application*/
    xdata::UnsignedInteger startTime_;

    /** start timestamp backup value, if infospace is changed from file*/
    unsigned int fuStartTime;
    
    toolbox::Chrono uptimeClock_;
    
    /** infospace variable for dim heartbeat update period in seconds*/
    xdata::UnsignedInteger heartbeatPeriod_;
    
    
    /** Version string of data acquisition backbone core framework*/
    xdata::String dabcVersion_;
    
     /** version string backup value, if infospace is changed from file*/
    std::string fxVersion;

     /** List of all configured nodes in cluster, comma separated*/
    xdata::String clusterNodes_;
    
     /** nodes string backup value, if infospace is changed from file*/
    std::string fxNodes;


      /** node id for module manager*/
    xdata::UnsignedInteger nodeId_;
    
    /** xdaq appliation id for the worker nodes*/
    xdata::UnsignedInteger workerTid_;
    
     /** xdaq appliation id for the controller node*/
    xdata::UnsignedInteger controllerTid_;



/** dabc core debug level value*/
    xdata::Integer debugLevel_;

      /** Optional status message for dim server/infospace*/
    xdata::String statusMessage_;
	    
    /** buffer to restore last message after parameter file load*/
    std::string fxLastMessage;
     
 
private:      
   
    void header(xgi::Input * in, xgi::Output * out ) throw (xgi::exception::Exception);
    void footer(xgi::Input * in, xgi::Output * out ) throw (xgi::exception::Exception);
 
    void dispatch (xgi::Input * in, xgi::Output * out)  throw (xgi::exception::Exception);
	void Configure(xgi::Input * in ) throw (xgi::exception::Exception);
	void Enable(xgi::Input * in ) throw (xgi::exception::Exception);
	void Halt(xgi::Input * in ) throw (xgi::exception::Exception);
	void Stop(xgi::Input * in ) throw (xgi::exception::Exception);
    void Start(xgi::Input * in ) throw (xgi::exception::Exception);
    void Error(xgi::Input * in ) throw (xgi::exception::Exception);
    void ResetFailure(xgi::Input * in ) throw (xgi::exception::Exception);
    void stateMachinePage( xgi::Output * out ) throw (xgi::exception::Exception);

  	void NullAction(toolbox::Event::Reference e) throw (toolbox::fsm::exception::Exception );

     
    void ConfigureAction(toolbox::Event::Reference e) throw (toolbox::fsm::exception::Exception);
	void EnableAction(toolbox::Event::Reference e) throw (toolbox::fsm::exception::Exception );
	void HaltAction(toolbox::Event::Reference e) throw (toolbox::fsm::exception::Exception );
	void StopAction(toolbox::Event::Reference e) throw (toolbox::fsm::exception::Exception );
	void StartAction(toolbox::Event::Reference e) throw (toolbox::fsm::exception::Exception );
	void ErrorAction(toolbox::Event::Reference e) throw (toolbox::fsm::exception::Exception );
	void ResetFailureAction(toolbox::Event::Reference e) throw (toolbox::fsm::exception::Exception );

    
    
    void FailureAction (toolbox::Event::Reference e) throw (toolbox::fsm::exception::Exception);

    void ChangedToFailure (toolbox::fsm::FiniteStateMachine & fsm) throw (toolbox::fsm::exception::Exception);  
   
    /** Function that is called after any fsm state change is completed.
      * Used to synchronize wsm, fsm and dim state services.*/
    void AfterStateChangeAction (toolbox::fsm::FiniteStateMachine & fsm)  throw (toolbox::fsm::exception::Exception); 
  
   /** This thread is the control system heartbeat */    
    bool heartBeat(toolbox::task::WorkLoop* wl);
  

    /** Starts the DIM server with actual dns parameters*/
    void StartDIMServer();
   
    /** start dim service with running time as controls heartbeat*/
    void StartHeartbeatService();
    
    /** Refresh running time info and update corresponding dim service*/
    void UpdateHeartbeat();
   

   
   
      /** for DIM server: keep current state of fsm as string */
    xdata::String currentState_;
    
    /** current state as char token*/
    xdata::UnsignedShort theState_;
   
   /** application state machine */	
    toolbox::fsm::AsynchronousFiniteStateMachine fsm_; 

    /** Web dialog state machine */
    xgi::WSM wsm_; 

     /** decide if finite state machine was switched
      * from web state machine (true), or from DIM/SOAP interface*/
    bool switchedByWSM_;
   
 
     
   /** Registry for parameters and commands; keeps the DIM server*/ 
   dabc::xd::Registry* fxRegistry;

    
    
   /** this workloop updates a dim service with the running time
   * of the application every n seconds. To be used as 
   *application "heartbeat" from the control system client  */
    toolbox::task::ActionSignature* heartBeatAction_;
	toolbox::task::WorkLoop* heartBeatLoop_;    
    
          
};





    


} // end namespace xd
} // end namespace dabc
#endif //DABC_XD_APPLICATION_H
