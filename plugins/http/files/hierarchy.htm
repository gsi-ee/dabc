<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>

   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
   <title>DABC node hierarchy</title>
   
   <link rel="stylesheet" href="httpsys/files/jquery.treeview.css" />
   <link rel="stylesheet" href="httpsys/files/screen.css" />
   
   <script src="httpsys/scripts/jquery.js" type="text/javascript"></script>
   <script src="httpsys/scripts/jquery.cookie.js" type="text/javascript"></script>
   <script src="httpsys/scripts/jquery.treeview.js" type="text/javascript"></script>
   <script src="httpsys/scripts/jquery.treeview.edit.js" type="text/javascript"></script>
   <script src="httpsys/scripts/jquery.treeview.async.js" type="text/javascript"></script>
   <script src="httpsys/scripts/raphael.2.1.0.min.js" type="text/javascript" ></script>
   <script src="httpsys/scripts/justgage.1.0.1.min.js" type="text/javascript" ></script>
   
   <script type='text/javascript'>

      var mgr;

      DABC = {};

      DABC.version = "2.1.1";

      DABC.DrawElement = function(_item) {
         this.itemname = _item;   // full item name in hierarhcy
         this.obj = 0;            // object (if exists)
         this.value = 0;          // value in text form
         this.frameid = "";       // id of top frame, where item is drawn
         this.infoframeid = "";   // if of frame with information 
         this.kind = "rate";      // kind of item
         this.drawobj = 0;        // object created for drawing like Gauge
         return this;
      }
      
      DABC.DrawElement.prototype.SetFrameId = function(id) {
         this.frameid = "dabcframe_" + id;
         this.infoframeid = "dabcinfoframe_" + id;
      }
      
      DABC.DrawElement.prototype.CreateFrames = function(topid) {
         var entryInfo = 
           "<div id='"+this.infoframeid+"'> </div>"+
           "<div id='"+this.frameid+ "' class='200x160px'> </div> \n";
         $(topid).append(entryInfo);
      }
      
      DABC.DrawElement.prototype.SetInfo = function(info) {
         document.getElementById(this.infoframeid).innerHTML = info;
      }
      
      DABC.DrawElement.prototype.CreateGauge = function(info) {
          this.drawobj = new JustGage({
             id: this.frameid, 
             value: 67,
             min: 0,
             max: 100,
             title: this.itemname
          }); 
      }
      
      DABC.DrawElement.prototype.SetValue = function(val) {
         this.value = val;
         this.drawobj.refresh(this.value);
      }
      
      // ======== end of DrawElement ======================
      
      // ============= start of DABC.Manager =============== 
   
      DABC.Manager = function(abc) {
         this.cnt = 0;            // counter to create new element 
         this.arr = new Array();  // array of DrawElement
         return this;
      }
      
      DABC.Manager.prototype.FindItem = function(_item) {
         for (var i in this.arr) {
            if (this.arr[i].itemname == _item) return this.arr[i];
         }
      }

      DABC.Manager.prototype.empty = function() {
         return this.arr.length == 0;
      }
      
      DABC.Manager.prototype.Draw = function(_item) {
         if (!_item) return;
      
         if (this.FindItem(_item)) return;
         
         var elem = new DABC.DrawElement(_item);
         
         elem.SetFrameId(this.cnt++);
         
         elem.CreateFrames("#report");
         // elem.SetInfo("<h5> full name:" + _item + " </h5>");
         
         elem.CreateGauge();
         
         this.arr.push(elem);
      }

      DABC.Manager.prototype.GetRequestUrl = function() {
         if (!this.arr.length) return;
      
         var args = "chartreq.htm?";
          
         for (var i in this.arr) {
            if (i>0) args+="&";
            args += this.arr[i].itemname;
         }
         
         return args;
      }
      
      DABC.Manager.prototype.NewRequest = function() {
        var req;
        // For Safari, Firefox, and other non-MS browsers
        if (window.XMLHttpRequest) {
          try {
            req = new XMLHttpRequest();
          } catch (e) {
            req = false;
          }
        } else if (window.ActiveXObject) {
          // For Internet Explorer on Windows
          try {
            req = new ActiveXObject("Msxml2.XMLHTTP");
          } catch (e) {
            try {
              req = new ActiveXObject("Microsoft.XMLHTTP");
            } catch (e) {
              req = false;
            }
          }
        }
        
        return req;
      }
      
      DABC.Manager.prototype.Alert = function() {
         alert("Call Update all " + this.arr.length());
      }
      
      
      DABC.Manager.prototype.UpdateAll = function() {

         var url = this.GetRequestUrl();
         if (!url) return;
     
         var req = this.NewRequest();
         if (!req) return;

         // $("#report").append("<br> Send request " + url);

         req.open("POST", url, false);
         req.send();
          
         var repl = JSON && JSON.parse(req.responseText) || $.parseJSON(req.responseText);

         // $("#report").append("<br> Get reply " + req.responseText);

         req = 0;
         if (!repl) return;

         for (var indx in repl) {
            var elem = this.FindItem(repl[indx].name);
            // $("#report").append("<br> Check reply for " + repl[indx].name);

            if (elem) elem.SetValue(repl[indx].value);
         }
      }
      
      
      
      // ============= end of DABC.Manager =============== 
   
      function initGUI() {
         if (!mgr) mgr = new DABC.Manager();
      
         $("#black").treeview( {
            url: "nodetopology.txt",
           control: "#treecontrol",
           persist: "cookie",
           cookieId: "treeview-black"
         });
         
         setInterval(function() { mgr.UpdateAll(); }, 3000);
      }
      
      function displayObject(item) {
         mgr.Draw(item.getAttribute("fullname"));
      }
       
      $(document).ready(initGUI);
      
   </script>
   
</head>

<body>
   
   <div id="overlay"><font face="Verdana" size="1px">DABC version 2.1</font></div>
   
   <div id="main" class="column" style="width:300px;float:left;">
   
      <a href="/">Main page</a><br><br>
   
      <h1><font face="Verdana" size="4">DABC node hierarchy</font></h1>
      
      <div id="treecontrol">
         <a title="Collapse the entire tree below" href="#"><img src="httpsys/images/minus.gif" /> Collapse All</a>
         <a title="Expand the entire tree below" href="#"><img src="httpsys/images/plus.gif" /> Expand All</a>
         <a title="Toggle the tree below, opening closed branches, closing open branches" href="#">Toggle All</a>
      </div>
      <div id="status">
          <ul id="black" class="treeview-black">
          </ul>
      </div>
      
  </div>

  <div id="reportHolder" class="column" style="width:500px;float:left;">
     <div id="report"> </div>
  </div>
  
</body>
</html>

