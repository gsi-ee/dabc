This is further development of JSRootIO, original version was download from  
https://root.cern.ch/svn/root/trunk/js

At its current state code is very differ from original
project of Bertrand Bellenot, but provides similar functionality.
Main motivation for changes - fix different errors,
make JavaScript code more flexible and applicable for online environment. 

August 2014:
1. All communication between server and browser done with JSON format.
2. Fix small error in dtree.js - one should always set 
   last sibling (_ls) property while tree can be dynamically changed.  
3. In JSRootCore.js provide central function, which handles different kinds 
   of XMLHttpRequest.  Use only async requests, also when getting file header.
4. Fully reorganize data management in file/tree/directory/collection hierarchical
   display. Now complete description collected in HPainter class and decoupled from
   visualization, performed with dTree.js. 
5. Remove all global variables from the code.
6. Automatic scripts/style loading handled via JSROOTCore.loadScript() function.
   One can specify arbitrary scripts list, which asynchronously loaded by browser.
7. Method to build simple GUI little bit changed. The example in index.htm.
   While loadScript and AssertPrerequisites functions moved to JSROOTCore, one
   can easily build many different kinds of GUIs, reusing provided JSRootCore.js functions.         
   

July 2014:
1. Migration to d3.v3.js and jQuery v2.1.1
2. Fix errors in filling of histogram statbox
3. Possibility of move and resize of statbox, title, color palete
4. Remove many (not all) global variables
5. Example with direct usage of JSRootIO graphics
6. Example of inserting ROOT graphics from THttpServer into <iframe></iframe> 

May 2014:
1. This JSRootIO code together with THttpServer class included
   in ROOT repository 

March 2014:
1. Introduce JSROOTIO.TBuffer class, which plays similar role 
   as TBuffer in native ROOT I/O. Simplifies I/O logic,
   reduce duplication of code in many places, fix errors.
   Main advantage - one could try to keep code synchronous with C++.
2. Avoid objects cloning when object referenced several times.
3. Treat special cases (collection, arrays) in one place.
   This is major advantage, while any new classes need to be implemented only once.
4. Object representation, produced by JSRootIO is similar to
   objects, produced by TBufferJSON class. By this one can exchange
   I/O engine and use same JavaSctript graphic for display.
5. More clear functions to display different elements of the file.
   In the future functions should be fully separated from I/O part
   and organized in similar way as online part.    
6. Eliminate usage of gFile pointer in the I/O part. 
7. Provide TBufferJSON::JsonWriteMember method. It allows to stream any 
   selected data member of the class. Supported are: 
   basic data types, arrays of basic data types, TString, TArray classes. 
   Also any object as data member can be streamed.
8. TRootSniffer do not creates sublevels for base classes
   
    
To do:
1. Redraw of canvas do not work at all.    
3. In JSROOTIO.R__unzip buffers bigger than 16 MB (0xfffffff) are not 
   treated correctly. In TKey.cxx, lines 259-275, big raw buffer cutted on blocks of 16MB.
    